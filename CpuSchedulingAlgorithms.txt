import java.util.*;

public class Main {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Page Scheduling MENU:");
        System.out.println(" 1. Round Robin");
        System.out.println(" 2. FCFS");
        System.out.println(" 3. SJF");
        System.out.print("Your Choice ==> ");
        int choice = sc.nextInt();

        switch (choice) {
            case 1:
                roundRobin(sc);
                break;
            case 2:
                fcfs(sc);
                break;
            case 3:
                sjf(sc);
                break;
            default:
                System.out.println("Invalid choice!");
        }
    }

    public static void roundRobin(Scanner sc) {
        // Round Robin scheduling
        int[] wtime = new int[10], btime = new int[10], rtime = new int[10];
        int num, quantum, rp, time = 0;
        
        System.out.print("Enter number of processes (MAX 10): ");
        num = sc.nextInt();

        System.out.println("Enter burst time:");
        for (int i = 0; i < num; i++) {
            System.out.print("\nP[" + (i + 1) + "]: ");
            btime[i] = sc.nextInt();
            rtime[i] = btime[i];  // Initially, remaining time equals burst time
            wtime[i] = 0;
        }

        System.out.print("\nEnter quantum: ");
        quantum = sc.nextInt();
        rp = num;

        int i = 0;
        System.out.print("0");  // Start time

        // Scheduling loop
        while (rp != 0) {
            if (rtime[i] > quantum) {
                rtime[i] -= quantum;
                time += quantum;
                System.out.print(" | P[" + (i + 1) + "] | ");
                System.out.print(time);
            } else if (rtime[i] <= quantum && rtime[i] > 0) {
                time += rtime[i];
                rtime[i] = 0;
                rp--;
                System.out.print(" | P[" + (i + 1) + "] | ");
                System.out.print(time);
            }
            i++;
            if (i == num) i = 0;
        }
        System.out.println();
    }

    public static void fcfs(Scanner sc) {
        // FCFS scheduling
        int[] wt, proc, tat, bst;
        int n, i, j, total = 0;

        System.out.print("\nNo. of processes: ");
        n = sc.nextInt();

        proc = new int[n];
        wt = new int[n];
        bst = new int[n];
        tat = new int[n];

        System.out.println("Enter CPU time:");
        for (i = 0; i < n; i++) {
            System.out.print(" Process[" + (i + 1) + "]: ");
            bst[i] = sc.nextInt();
            proc[i] = i + 1;
        }

        wt[0] = 0;
        for (i = 1; i < n; i++) {
            wt[i] = 0;
            for (j = 0; j < i; j++) {
                wt[i] += bst[j];
            }
            total += wt[i];
        }

        System.out.println("\nProcess\t\tBT\tWT\tTAT");
        System.out.println("-------------------------------------");
        for (i = 0; i < n; i++) {
            tat[i] = wt[i] + bst[i];
            System.out.println("Proc[" + proc[i] + "]\t\t" + bst[i] + "\t" + wt[i] + "\t" + tat[i]);
        }
    }

    public static void sjf(Scanner sc) {
        // SJF scheduling
        int[] wt, proc, tat, bst;
        int n, i, j, total = 0;

        System.out.print("\nNo. of processes: ");
        n = sc.nextInt();

        proc = new int[n];
        wt = new int[n];
        bst = new int[n];
        tat = new int[n];

        System.out.println("Enter CPU time:");
        for (i = 0; i < n; i++) {
            System.out.print(" Process[" + (i + 1) + "]: ");
            bst[i] = sc.nextInt();
            proc[i] = i + 1;
        }

        // Sort processes by burst time
        for (i = 0; i < n; i++) {
            int pp = i;
            for (j = i + 1; j < n; j++) {
                if (bst[j] < bst[pp]) {
                    pp = j;
                }
            }
            int temp = bst[i];
            bst[i] = bst[pp];
            bst[pp] = temp;

            temp = proc[i];
            proc[i] = proc[pp];
            proc[pp] = temp;
        }

        wt[0] = 0;
        for (i = 1; i < n; i++) {
            wt[i] = 0;
            for (j = 0; j < i; j++) {
                wt[i] += bst[j];
            }
            total += wt[i];
        }

        System.out.println("\nProcess\t\tBT\tWT\tTAT");
        System.out.println("-------------------------------------");
        for (i = 0; i < n; i++) {
            tat[i] = wt[i] + bst[i];
            System.out.println("Proc[" + proc[i] + "]\t\t" + bst[i] + "\t" + wt[i] + "\t" + tat[i]);
        }
    }
}
