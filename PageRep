import java.util.*;

public class PageReplacement {

    // Function for FIFO page replacement
    static void fifoPageReplacement(int[] pages, int capacity) {
        System.out.println("\nFIFO Page Replacement:");
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> set = new HashSet<>();
        int pageFaults = 0;

        for (int page : pages) {
            if (!set.contains(page)) {
                if (queue.size() == capacity) {
                    int removed = queue.poll();
                    set.remove(removed);
                }
                queue.add(page);
                set.add(page);
                pageFaults++;
            }
            System.out.println("Page: " + page + " -> " + queue);
        }

        System.out.println("Total page faults: " + pageFaults);
    }

    // Function for LRU page replacement
    static void lruPageReplacement(int[] pages, int capacity) {
        System.out.println("\nLRU Page Replacement:");
        LinkedHashMap<Integer, Integer> map = new LinkedHashMap<>(capacity, 0.75f, true);
        int pageFaults = 0;

        for (int page : pages) {
            if (!map.containsKey(page)) {
                if (map.size() == capacity) {
                    int lruPage = map.keySet().iterator().next();
                    map.remove(lruPage);
                }
                pageFaults++;
            }
            map.put(page, page);
            System.out.println("Page: " + page + " -> " + map.keySet());
        }

        System.out.println("Total page faults: " + pageFaults);
    }

    // Function for Optimal page replacement
    static void optimalPageReplacement(int[] pages, int capacity) {
        System.out.println("\nOptimal Page Replacement:");
        Set<Integer> set = new HashSet<>();
        int pageFaults = 0;
        List<Integer> futureReferences = new ArrayList<>();

        for (int i = 0; i < pages.length; i++) {
            int page = pages[i];

            if (!set.contains(page)) {
                if (set.size() == capacity) {
                    int farthestPage = -1;
                    int farthestDistance = -1;

                    for (int currentPage : set) {
                        int distance = Integer.MAX_VALUE;
                        for (int j = i + 1; j < pages.length; j++) {
                            if (pages[j] == currentPage) {
                                distance = j;
                                break;
                            }
                        }
                        if (distance > farthestDistance) {
                            farthestDistance = distance;
                            farthestPage = currentPage;
                        }
                    }

                    set.remove(farthestPage);
                }
                set.add(page);
                pageFaults++;
            }
            futureReferences.add(page);
            System.out.println("Page: " + page + " -> " + set);
        }

        System.out.println("Total page faults: " + pageFaults);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of pages: ");
        int n = sc.nextInt();
        int[] pages = new int[n];
        System.out.println("Enter the page reference string:");
        for (int i = 0; i < n; i++) {
            pages[i] = sc.nextInt();
        }

        System.out.print("Enter the capacity of the frame: ");
        int capacity = sc.nextInt();

        fifoPageReplacement(pages, capacity);
        lruPageReplacement(pages, capacity);
        optimalPageReplacement(pages, capacity);

        sc.close();
    }
}
